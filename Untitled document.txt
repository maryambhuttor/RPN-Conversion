#include "error.h"
char errorMessages[][256] = {
        "Calculation successful.",
        "Nullptr error",
        "Too many operands",
        "Two few operands",
        "Unknown Operand"
};


//
// Created by marya on 4/22/2021.
//


#ifndef PS5_ERROR_H
#define PS5_ERROR_H


#define SUCCESS       0
#define NULLPTR       1
#define TOOMANY       2
#define TOOFEW        3
#define UNKNOWN       4


extern char errorMessages[][256];






#endif //PS5_ERROR_H




//
// Created by marya on 4/23/2021.
//




#include "error.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "stack.h"


int is_operator(char *token)
{
    int ret = 0;
    if(token[0] == '+' || token[0] == '-' || token[0] == '*' || token[0] == '/' || token[0] == '^')
    {
        ret = 1;
    }
    return ret;
}


int is_number(char *token)
{
    int i;
    int ret = 1;


    for(i=0; i<strlen(token); i++)
    {
        if(!isdigit(token[i]))
        {
            ret = 0;
            break;
        }
    }
    return ret;
}


void infix_to_rpn(char *expression, char *outputString, int *status) {
    char *token;
    node *output = NULL;
    node *operators = NULL;
    node *number;
    node *ans = NULL;
    node *item;
    char text[80];


    node *operator;




    *status = SUCCESS; /* everything is ok */




    token = strtok(expression, " \t\n\r");
    while (token != NULL && *status == 0) {
        // Process the token


        //if the token is a number, then:
        if(is_number(token))
        {
            //    push it to the output queue.
            number = createNumberNode(atof(token));
            push(number, &output);
        }
            //else if the token is a function then:
            //    push it onto the operator stack
            //else if the token is an operator then:
        else if(is_operator(token))
        {
            //    while ((there is an operator at the top of the operator stack)
            //          and ((the operator at the top of the operator stack has greater precedence)
            //              or (the operator at the top of the operator stack has equal precedence and the token is left associative))
            //          and (the operator at the top of the operator stack is not a left parenthesis)):
            //        pop operators from the operator stack onto the output queue.
            //    push it onto the operator stack.
            operator = createOperatorNode(token[0]);
            while(!isEmpty(operators) && ((peek(&operators)->precedence > operator->precedence)||
                                          (peek(&operators)->precedence == operator->precedence && operator->contents.operator != '^'))
                  && peek(&operators)->contents.operator != '(' )
            {
                push(pop(&operators),&output);
            }
            push(operator,&operators);
        }
        else if(token[0] == '(')
        {
            //else if the token is a left parenthesis (i.e. "("), then:
            //    push it onto the operator stack.
            operator = createOperatorNode('(');
            push(operator, &operators);
        }
        else if(token[0] == ')')
        {
            //else if the token is a right parenthesis (i.e. ")"), then:
            //    while the operator at the top of the operator stack is not a left parenthesis:
            //        pop the operator from the operator stack onto the output queue.
            while(!isEmpty(operators) && peek(&operators)->contents.operator != '(')
            {
                push(pop(&operators),&output);
            }
            //    /* If the stack runs out without finding a left parenthesis, then there are mismatched parentheses. */
            if(isEmpty(operators))
            {
                *status = UNKNOWN;
                break;
            }
            else if(peek(&operators)->contents.operator == '(')
            {
                //    if there is a left parenthesis at the top of the operator stack, then:
                //        pop the operator from the operator stack and discard it
                destroyNode(pop(&operators));
            }


            //    if there is a function token at the top of the operator stack, then:
            //        pop the function from the operator stack onto the output queue.
        }


        token = strtok(NULL, " \t\n\r");
    }


///* After while loop, if operator stack not null, pop everything to output queue */
//if there are no more tokens to read then:
//    while there are still operator tokens on the stack:
//        /* If the operator token on the top of the stack is a parenthesis, then there are mismatched parentheses. */
//        pop the operator from the operator stack onto the output queue.
    while(!isEmpty(operators))
    {
        operator = pop(&operators);
        if(operator->contents.operator == '(')
        {
            *status = UNKNOWN;
            break;
        }
        push(operator, &output);
    }


    clearStack(&operators);


    // Need to reverse our stack order because output is an output queue, we want our answer to be a stack
    while(!isEmpty(output))
    {
        push(pop(&output),&ans);
    }


    outputString[0] = '\0';   // Initialize an empty string


    while(!isEmpty(ans))
    {
        item = pop(&ans);
        if(item->type == NUMBER)
        {
            sprintf(text,"%f ", item->contents.value);
            strcat(outputString,text);
        }
        else
        {
            sprintf(text,"%c ", item->contents.operator);
            strcat(outputString,text);
        }
        destroyNode(item);
    }
}








//
// Created by marya on 4/23/2021.
//


#ifndef PS5_INFIX_H
#define PS5_INFIX_H
#include "stack.h"
void infix_to_rpn(char* expression, char *output, int* status);




#endif //PS5_INFIX_H






#include <stdio.h>
#include <string.h>
#include "infix.h"
#include "error.h"
#include "rpn.h"




#define BUFFER_STRING 160


int main(int argc, char **argv) {
    FILE *infile, *outfile;
    char inputString[BUFFER_STRING];
    char rpnString[BUFFER_STRING];
    int status;
    double value;


    if(argc != 3)
    {
        printf("usage: ./%s <infile.txt> <outfile.txt>\n", argv[0]);
        return -1;
    }


     infile = fopen(argv[1], "r");
    //infile = fopen("PS5-infix.txt", "r");


    if(infile == NULL)
    {
        printf("Could not open %s for readng\n",argv[1]);
        return -1;
    }


    outfile = fopen(argv[2], "w");
    //outfile = fopen("output.txt", "w");


    if(outfile == NULL)
    {
        printf("Could not open %s for writing\n",argv[2]);
        return -1;
    }




    while(fgets(inputString, BUFFER_STRING-1, infile))
    {
        infix_to_rpn(inputString, rpnString, &status);
        if(status != SUCCESS)
        {
            printf("%s\n", errorMessages[status]);
        }
        //  fprintf(outfile,"%s\n",rpnString);
        else {
            value = evaluate(rpnString, &status);
        }
        if(status != SUCCESS)
        {
            printf("%s\n", errorMessages[status]);
        }
        fprintf(outfile,"%f\n",value);


    }




    fclose(infile);
    fclose(outfile);


    return 0;


}




#include <stdlib.h>
#include <stdio.h>
#include "node.h"


node* createNode(int type, double value)
{
    node* new_node = (node*)malloc(sizeof(node));


    if(new_node != NULL)
    {
        new_node->type = type;
        new_node->contents.value = value;
        new_node->next = NULL;
    }
    else
    {
        printf("Error: Unable to create a node\n");
    }


    return new_node;
}


node * createNumberNode(double value)
{
    node* new_node = (node*)malloc(sizeof(node));


    if(new_node != NULL)
    {
        new_node->type = NUMBER;
        new_node->contents.value = value;
        new_node->next = NULL;
    }
    else
    {
        printf("Error: Unable to create a node\n");
    }


    return new_node;
}


node *createOperatorNode(char operator)
{
    node* new_node = (node*)malloc(sizeof(node));


    if(new_node != NULL)
    {
        new_node->type = OPERATOR;
        new_node->contents.operator = operator;
        switch(operator)
        {
            case '+':
            case '-':
                new_node->precedence = 0;
                break;
            case '*':
            case '/':
                new_node->precedence = 1;
                break;
            case '^':
                new_node->precedence = 2;
                break;
            case '(':
            case ')':
                new_node->precedence = 3;
                break;


        }
        new_node->next = NULL;
    }
    else
    {
        printf("Error: Unable to create a node\n");
    }


    return new_node;
}


void destroyNode(node* myNode)
{
    free(myNode);
}






//
// Created by marya on 4/22/2021.
//


#ifndef PS5_NODE_H
#define PS5_NODE_H
typedef enum ExpressionTypes{OPERATOR, NUMBER} Type;
typedef struct node node;
struct node
{
    union
    {
        double value;
        char operator;
    } contents;
    Type type;
    int precedence;
    node* next;
};
node* createNode(int type, double value);
node* createOperatorNode(char operator);
node* createNumberNode(double value);
void destroyNode(node* myNode);










#endif //PS5_NODE_H


















//
// Created by marya on 4/23/2021.
//


#include "rpn.h"
#include "error.h"
#include <stdlib.h>
#include <string.h>
#include <ctype.h>


double mypow(double base, int exponent)
{
    if(exponent == 0) // Base case
    {
        return 1.0;
    }
    return base * mypow(base, exponent - 1);
}


double evaluate(char *expression, int *status)
{
    char *token;
    node *stack = NULL;
    node *number;
    node *left, *right;
    double answer;


    *status = SUCCESS; /* everything is ok */




    token = strtok(expression," \t\n\r");
    while(token != NULL && *status == 0 )
    {
        // Process the token
        if(strlen(token) == 1)
        {
            switch(token[0])
            {
                case '+':  /*left + right*/
                    left = pop(&stack);
                    right = peek(&stack);


                    if(left != NULL && right != NULL)
                    {
                        right->contents.value = right->contents.value + left->contents.value;
                        destroyNode(left);
                    }
                    else
                    {
                        *status = NULLPTR;
                    }
                    break;
                case '-':
                    left = pop(&stack);
                    right = peek(&stack);


                    if(left != NULL && right != NULL)
                    {
                        right->contents.value = right->contents.value - left->contents.value;
                        destroyNode(left);
                    }
                    else
                    {
                        *status = NULLPTR;
                    }
                    break;
                case '*':
                    left = pop(&stack);
                    right = peek(&stack);


                    if(left != NULL && right != NULL)
                    {
                        right->contents.value = right->contents.value * left->contents.value;
                        destroyNode(left);
                    }
                    else
                    {
                        *status = NULLPTR;
                    }
                    break;
                case '/':
                    left = pop(&stack);
                    right = peek(&stack);


                    if(left != NULL && right != NULL)
                    {
                        right->contents.value = right->contents.value / left->contents.value;
                        destroyNode(left);
                    }
                    else
                    {
                        *status = NULLPTR;
                    }
                    break;


                case '^':
                    left = pop(&stack);
                    right = peek(&stack);


                    if(left != NULL && right != NULL)
                    {
                        right->contents.value = mypow(right->contents.value, (int) left->contents.value);
                        destroyNode(left);
                    }
                    else
                    {
                        *status = NULLPTR;
                    }
                    break;


                default:  /* We either have left digit or an unrecognized operator*/
                    if(isdigit(token[0]))
                    {
                        number = createNumberNode(atof(token));
                        push(number, &stack );
                    }
                    else
                    {
                        *status = UNKNOWN;
                    }
                    break;
            }
        }
        else
        {
            /* if we make it to here, we have left number */
            number = createNumberNode(atof(token));
            push(number, &stack );
        }




        token = strtok(NULL, " \t\n\r");
    }


    /* No more processing if we have an error */
    if(*status != SUCCESS)
    {
        return 0.0;
    }


    number = pop(&stack);
    if(number == NULL)
    {
        *status = NULLPTR;
        return 0.0;
    }


    answer = number->contents.value;
    destroyNode(number);


    if(peek(&stack) != NULL) /* check not enough operators */
    {
        *status = TOOFEW;
    }


    clearStack(&stack);




    return answer;


}
//
// Created by marya on 4/23/2021.
//


#ifndef PS5_RPN_H
#define PS5_RPN_H


#include "stack.h"
double evaluate(char* expression, int* status);








#endif //PS5_RPN_H




//
// Created by marya on 4/22/2021.
//


#include "stack.h"
#include <stdlib.h>






bool isEmpty(node* head)
{
    return !head;
}
void push(node* newNode, node** head)
{
    newNode->next = *head;
    *head = newNode;
}
node* pop(node** head)  //pointer to pointer
{
    if(!isEmpty(*head))
    {
        node* poppedNode = *head;
        *head = (*head)->next;    //deferenced
        return poppedNode;
    }
    else
    {
        return NULL;
    }
}
node* peek(node** head) // pointer-to-pointer not technically need, but makes calls to push, pop, peek consistent
{
    return *head;
}
void clearStack(node** head)  //pointer to pointer because we are changing head
{
    if(!isEmpty(*head))
    {
        while(*head != NULL)
        {
            node* poppedNode = *head;
            *head = (*head)->next;
            destroyNode(poppedNode);
        }
    }
}


//
// Created by marya on 4/22/2021.
//


#ifndef PS5_STACK_H
#define PS5_STACK_H
#include <stdbool.h>
#include "node.h"


bool isEmpty(node* head);
void push(node* newNode, node** head);
node* pop(node** head);
node* peek(node** head);
void clearStack(node** head);




#endif //PS5_STACK_H














28.000000
36.000000
31.000000
62.000000
1310.000000
536.000000
536.000000
30.000000


4 + 8 * 3
( 4 + 8 ) * 3
6 + 9 + 4 ^ 2
46 + ( 8 * 4 ) / 2
7 ^ 2 * ( 25 + 10 / 5 ) - 13
( 18 / 3 ) ^ 2 + ( ( 13 + 7 ) * 5 ^ 2 )
( 18 / 3 ) ^ 2 + ( ( 13 + 7 ) ) * 5 ^ 2 )
( 18 / 3 ) ^ 2 + ( ( 13 + 7 ) * 5 ? 2 )